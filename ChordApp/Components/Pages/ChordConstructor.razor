@page "/chord-constructor"
@rendermode InteractiveServer


<table class="table">
    <thead>
        <tr>
            <th>
                Chords
            </th>
        </tr>
    </thead>
    <tbody class="chord-list" role="status">
        @foreach (var chord in chords.Split(',').Take(chords.Split(',').Length - 1).ToArray())
        {
            <tr class="chord-row">
                @foreach (var SplitChordName in chord.Split(':'))
                {
                    <th>
                        @SplitChordName

                        <!-- Display button only for chords -->
                        @if (SplitChordName.ToString().Contains('/'))
                        {
                            <button class="btn btn-primary" @onclick="@(e => DisplayChord(SplitChordName))">Display</button>
                        }
                    </th>
                }
            </tr>
        }
    </tbody>
</table>


<p role="status">Current Depth: @depth</p>

<p>
    <input class="chord-input" type="text" value ="C" @oninput="(EventArgs) => {OnChange(EventArgs.Value.ToString());}"/>
    <input class="depth-input" type="text" value = "@depth" @oninput="(EventArgs) => {OnChangeDepth(EventArgs.Value.ToString());}"/>

    <button class="btn btn-primary" @onclick="GenerateChord">Search Chords</button>

    @if (root.Split(' ').Length == 1 && note != null)
    {
        <p role="status">Number of @AccidentalType in @root (@(note.GetAlt().Where(n => !n.Equals(root)).FirstOrDefault())) @Mode: @numAccidentals</p>
        <div>
            <button class="btn btn-primary" @onclick="ChangeMode">@Mode</button>
            <p>@Accidentals</p>
        </div>

    }

</p>



<!-- The DIV below is intended to generate the graphic of the piano keys, and handles the highlights -->
<div class="piano-keys">
    <div>
        @if (KeyScaleImages != null)
        {
            Note TempNote = new Note("C");

            int CurrScale = 0;
            int CurrChord = 0;

            @for (int i = 0; i < KeyScaleImages.Length; i++)
            {
                string Note = TempNote.GetScale()[i % 12];

                string UniqueKeyStyle = "";

                // Highlight the Scale
                if (CurrScale < Scale.Count && Note.Split('/').Any(item => Scale[CurrScale].Equals(item)))
                {
                    CurrScale++; // note Found
                    UniqueKeyStyle += "border-width: 4px; border-color: red;"; 
                }
                if (CurrChord < depth && Note.Split('/').Any(item => ActiveChord.Contains(item)))
                {
                    CurrChord++;
                    UniqueKeyStyle += "background-color: yellow;";
                }
                <button class=@KeyScaleImages[i] style=@UniqueKeyStyle id="AllKeys"></button>      
            }
        }
    </div>
</div>



@code {


    private string root = "C"; // default C, the root note(s)

    private int depth = 3; // default 3, the chord note count
    private string numAccidentals = ""; // default "" (invalid chord)
    private string AccidentalType = "accidentals";
    private string Mode = "Major";

    private Note note;
    private Chord chordObj; // the chord object generated by GenerateChord
    private string chords = ","; // the string containing the representation of the chords generated
    private string Accidentals = ""; // string representing all the sharps/flats in a single string

    private string[] KeyScaleImages = new string[0]; // for drawing the actual keys (with styles)

    private List<String> Scale = new List<String>(); // for displaying scale highlights
    private List<String> ActiveChord = new List<String>(); // for displaying chord highlights


    /// <summary>
    /// Draws the Base Piano, and creates an array representation of the entire piano
    /// </summary>
    /// <returns>A 24 Key Piano (including Black Keys) represented by an array of Strings</returns>
    private string[] DrawPiano()
    {

        int CScaleLengthOctaves = 2; // default 1, but 2 for 2 octaves

        string[] CScale = new Note("C").GetScale(); // Notes

        string[] CScaleImageRef = new string[CScale.Length * CScaleLengthOctaves]; // images ref

        string[] KeysFacingRight = new string[] { "C", "F" };
        string[] KeysFacingLeft = new string[] { "E", "B" };

        for (int i = 0; i < CScaleImageRef.Length; i++)
        {
            Note ScaleNote = new Note(CScale[i%CScale.Length].Split('/').First()); // Creates a new Note for each note on scale for comparison
            if (KeysFacingRight.Any(n => ScaleNote.GetAlt().Contains(n)))
            {
                CScaleImageRef[i] = "RightFacingKey";
            }
            else if (KeysFacingLeft.Any(n => ScaleNote.GetAlt().Contains(n)))
            {
                CScaleImageRef[i] = "LeftFacingKey";
            }
            else if (ScaleNote.ToString().Contains("#") || ScaleNote.ToString().Contains("b"))
            {
                CScaleImageRef[i] = "BlackKey";
            }
            else
            {
                CScaleImageRef[i] = "MiddleKey";
            }

        }
        return CScaleImageRef;
    }

    /// <summary>
    /// For Displaying Chords using  the Display button.
    /// </summary>
    /// <param name="Chord">Automatically filled in from the program. A string of Notes in a chord C/E/G ex.</param>
    private void DisplayChord(string Chord)
    {
        List<String> NoteList = Chord.Trim().Split('/').ToList();
        ActiveChord = NoteList;
        GenerateChord();

    }


    /// <summary>
    /// Modifies the value of the "Depth" or amount of notes in the chord
    /// </summary>
    /// <param name="Depth">A string representing the numeric value which defines the depth</param>
    private void OnChangeDepth(string Depth)
    {
        if (int.TryParse(Depth, out int numDepth))
        {
            this.depth = numDepth;
        }
    }

    /// <summary>
    /// Modifies the value of the "Root Note(s)" root. Resets displayed text if Modified
    /// </summary>
    /// <param name="Value">A string in the proper chord format "note1 note2 ..."</param>
    private void OnChange(string Value)
    {
        if (!string.IsNullOrEmpty(Value))
        {
            note = null;

            root = Value;
            if (root.Split(' ').Length >= 3) {
                depth = root.Split(' ').Length;
            }
        }
    }

    /// <summary>
    /// Generates a Chord Object 'chordObj' using predefined values from input fields
    /// </summary>
    private void GenerateChord()
    {
        try
        {
            chordObj = new Chord(root.Split(' '), depth);
            chords = chordObj.ToString();
            depth = chordObj.MaxDepth();

            note = new Note(root.Split(' ').First());
            string rootNote = note.GetRep().Split('/').First();

            numAccidentals = note.GetNumAccidentals(rootNote, Mode).Item1.ToString();
            AccidentalType = note.GetNumAccidentals(rootNote, Mode).Item2;
            Accidentals = String.Join(", ", note.GetAccidentals(rootNote, Mode));

            Scale = note.FullScale(rootNote, Mode); // get the scale
            Scale.Add(rootNote); // Just to complete the Scale (Can be removed)

            KeyScaleImages = DrawPiano();
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    /// <summary>
    /// Changes the "Mode" of the current root chord. Only called if there is 1 defined root note
    /// </summary>
    private void ChangeMode()
    {
        if (Mode.Equals("Major"))
        {
            Mode = "Minor";
        }
        else if (Mode.Equals("Minor"))
        {
            Mode = "Major";
        }
        GenerateChord();
    }
}

