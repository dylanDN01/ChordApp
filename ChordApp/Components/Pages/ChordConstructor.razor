@page "/chord-constructor"
@rendermode InteractiveServer


<table class="table">
    <thead>
        <tr>
            <th>
                Chords
            </th>
        </tr>
    </thead>
    <tbody class="chord-list" role="status">
        @foreach (var chord in chords.Split(',').Take(chords.Split(',').Length - 1).ToArray())
        {
            <tr class="chord-row">
                @foreach (var SplitChordName in chord.Split(':'))
                {
                    <th>
                        @SplitChordName
                    </th>
                }
            </tr>
        }
    </tbody>
</table>


<p role="status">Current Depth: @depth</p>

<p>
    <input class="chord-input" type="text" value ="C" @oninput="(EventArgs) => {OnChange(EventArgs.Value.ToString());}"/>
    <input class="depth-input" type="text" value = "3" @oninput="(EventArgs) => {OnChangeDepth(EventArgs.Value.ToString());}"/>

    <button class="btn btn-primary" @onclick="GenerateChord">Search Chords</button>
</p>


<div>
    @if (root.Split(' ').Length == 1)
    {
        <p role="status">Number of @AccidentalType in @root @Mode: @numAccidentals</p>
        <div>
            <button class="btn btn-primary" @onclick="ChangeMode">@Mode</button>
            <p>@Accidentals</p>
        </div>
        
    }
    
</div>



@code {
    private string root = "C"; // default C, the root note(s)

    private int depth = 3; // default 3, the chord note count
    private string numAccidentals = ""; // default "" (invalid chord)
    private string AccidentalType = "accidentals";
    private string Mode = "Major";


    private Chord chordObj; // the chord object generated by GenerateChord
    private string chords = ","; // the string containing the representation of the chords generated
    private string Accidentals = "";

    private void ChangeMode()
    {
        if (Mode.Equals("Major"))
        {
            Mode = "Minor";
        }
        else if (Mode.Equals("Minor"))
        {
            Mode = "Major";
        }
        GenerateChord();
    }


    private void DisplayChord(string Chord)
    {
        //TODO
    }

    /// <summary>
    /// Modifies the value of the "Depth" or amount of notes in the chord
    /// </summary>
    /// <param name="Depth">A string representing the numeric value which defines the depth</param>
    private void OnChangeDepth(string Depth)
    {
        if (int.TryParse(Depth, out int numDepth))
        {
            this.depth = numDepth;
        }
    }

    /// <summary>
    /// Modifies the value of the "Root Note(s)" root
    /// </summary>
    /// <param name="Value">A string in the proper chord format "note1 note2 ..."</param>
    private void OnChange(string Value)
    {
        if (!string.IsNullOrEmpty(Value))
        {
            numAccidentals = "";
            AccidentalType = "accidentals";
            Accidentals = "";
            root = Value;
        }
    }

    /// <summary>
    /// Generates a Chord Object 'chordObj' using predefined values from input fields
    /// </summary>
    private void GenerateChord()
    {
        try
        {
            chordObj = new Chord(root.Split(' '), depth);
            chords = chordObj.ToString();
            depth = chordObj.MaxDepth();

            Note note = new Note(root.Split(' ').First());
            string rootNote = note.GetRep().Split('/').First();

            numAccidentals = note.GetNumAccidentals(rootNote, Mode).Item1.ToString();
            AccidentalType = note.GetNumAccidentals(rootNote, Mode).Item2;
            Accidentals = String.Join(", ", note.GetAccidentals(rootNote, Mode));
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}

